/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId]) {
/******/ 			return installedModules[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// define getter function for harmony exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		if(!__webpack_require__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, {
/******/ 				configurable: false,
/******/ 				enumerable: true,
/******/ 				get: getter
/******/ 			});
/******/ 		}
/******/ 	};
/******/
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};
/******/
/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(__webpack_require__.s = 5);
/******/ })
/************************************************************************/
/******/ ({

/***/ 5:
/***/ (function(module, exports) {

eval("/**\n * @fileoverview Treasure Hunter\n * @author burning <iburning@live.cn>\n * @version 2017.08.28\n */\n\n//Aliases\n// console.log('PIXI', PIXI)\nvar Container = PIXI.Container;\nvar Graphics = PIXI.Graphics;\nvar Loader = PIXI.loader;\nvar Rectangle = PIXI.Rectangle;\nvar Renderer = PIXI.autoDetectRenderer;\nvar Resources = PIXI.loader.resources;\nvar Sprite = PIXI.Sprite;\nvar Text = PIXI.Text;\nvar TextureCache = PIXI.utils.TextureCache;\nvar Texture = PIXI.Texture;\n\n// Create a new instance of the Bump collision library\nvar bump = new Bump(PIXI);\n\n// Create a Pixi renderer\nvar renderer = Renderer(512, 512);\n// Set the canvas's border style and background color\nrenderer.view.style.border = \"1px solid #000\";\nrenderer.backgroundColor = \"0xFFFFFF\";\n\n// Add the canvas to the HTML document\ndocument.getElementById(\"pixi\").appendChild(renderer.view);\n\n// Create a container object called the 'stage'\nvar stage = new Container();\n\nvar gameScene = null;\nvar gameOverScene = null;\n\n// Set the initial game state\nvar state = play;\nvar explorer = null;\nvar explorerSpeed = 3;\n// An array to store all the blob monsters\nvar blobs = [];\nvar blobSpeed = 5;\nvar treasure = null;\nvar door = null;\nvar healthBar = null;\nvar message = null;\n\nlinkFont(\"assets/Pixilator.ttf\");\n\n// Load resources (images and fonts) and run the 'setup' function when it's done\nLoader.add([\"assets/treasureHunter.json\", \"assets/Pixilator.ttf\"]).load(setup);\n\nfunction setup() {\n  // Create an 'id' alias for the texture atlas frame ids\n  id = Resources[\"assets/treasureHunter.json\"].textures;\n  // console.log('id', id)\n\n  // The 'gameScene' container that contains all the main game sprites\n  gameScene = new Container();\n  stage.addChild(gameScene);\n\n  // Create the main sprites:\n  // The 'dungeon' sprite\n  var dungeon = new Sprite(id['dungeon.png']);\n  gameScene.addChild(dungeon);\n\n  // The 'door' sprite\n  door = new Sprite(id['door.png']);\n  door.position.set(32, 0);\n  gameScene.addChild(door);\n\n  // The 'explorer' sprite\n  explorer = new Sprite(id['explorer.png']);\n  explorer.x = 64;\n  explorer.y = (gameScene.height - explorer.height) / 2;\n  explorer.vx = 0;\n  explorer.vy = 0;\n  gameScene.addChild(explorer);\n\n  // The 'treasure' sprite\n  treasure = new Sprite(id['treasure.png']);\n  treasure.x = gameScene.width - treasure.height - 48;\n  treasure.y = (gameScene.height - treasure.height) / 2;\n  gameScene.addChild(treasure);\n\n  // The 'blobs' enemy sprites\n  var numberOfBlobs = 6;\n  var spacing = 48;\n  var xOffset = 150;\n  var direction = 1;\n\n  // Make as many blobs as there are 'numberOfBlobs'\n  for (var i = 0; i < numberOfBlobs; i++) {\n    // Make a blob\n    var blob = new Sprite(id[\"blob.png\"]);\n\n    // Space each blob horizontally according to the 'spacing' value.\n    // 'xOffset' determines the point from the left of the screen\n    // at which the first blob should be added\n    var x = spacing * i + xOffset;\n\n    // Give the blob a random y position\n    var y = randomInt(0, stage.height - blob.height);\n\n    // Set the blob's position\n    blob.x = x;\n    blob.y = y;\n\n    // Set the blob's vertical velocity. 'direction' will be either '1' or '-1'.\n    // '1' means enemy will move down and '-1' means the blob will move up.\n    // Multiplying 'direction' by 'speed' determines the blob's vertical direction\n    blob.vy = blobSpeed * direction;\n\n    // Reverse the direction for the next blob\n    direction *= -1;\n\n    // Push the blob into the 'blobs' array\n    blobs.push(blob);\n    // Add the blob to the 'gameScene'\n    gameScene.addChild(blob);\n  }\n\n  healthBar = initHealthBar();\n  healthBar.position.set(stage.width - 170, 4);\n  gameScene.addChild(healthBar);\n\n  // Create the 'gameOver' scene\n  gameOverScene = new Container();\n  stage.addChild(gameOverScene);\n  // Make the 'gameOver' scene invisible when the game first starts\n  gameOverScene.visible = false;\n\n  // Create the text sprite and add it to the 'gameOver' scene\n  message = new Text(\"The End!\", { font: \"48px Pixilator\" });\n  message.x = (stage.width - message.width) / 2;\n  message.y = stage.height / 2 - 32;\n  gameOverScene.addChild(message);\n\n  // Bind keyboard\n  bindKeyBorad();\n\n  // Set the game's current state to 'play'\n  state = play;\n\n  // Start the game loop\n  gameLoop();\n}\n\nfunction gameLoop() {\n  // Loop this function 60 times per second\n  requestAnimationFrame(gameLoop);\n\n  // Run the current state\n  state();\n\n  // Render the stage\n  renderer.render(stage);\n}\n\nfunction play() {\n  // All the game logic goes here\n\n  var area = { x: 28, y: 10, width: 488, height: 480\n\n    // Use the explorer's velocity to make it move\n  };explorer.x += explorer.vx;\n  explorer.y += explorer.vy;\n\n  // Contain the explorer inside the area of the dungeon\n  bump.contain(explorer, area);\n\n  // Set 'explorerHit' to 'false' before checking for a collision\n  var explorerHit = false;\n\n  // Loop through all the sprites in the 'enemies' array\n  blobs.forEach(function (blob) {\n    // Move the blob\n    blob.y += blob.vy;\n\n    // Check the blob's screen boundaries\n    var blobHitsWall = bump.contain(blob, area);\n\n    // If the blob hits the top or bottom of the stage,\n    // reverse its direction\n    if (blobHitsWall) {\n      if (blobHitsWall.has(\"top\") || blobHitsWall.has(\"bottom\")) {\n        blob.vy *= -1;\n      }\n    }\n\n    // Test for a collision. If any of the enemies are touching the explorer,\n    // set 'explorerHit' to 'true'\n    if (bump.hitTestRectangle(explorer, blob)) {\n      explorerHit = true;\n    }\n  });\n\n  // If the explorer is hit...\n  if (explorerHit) {\n    // Make the explorer semi-transparent\n    explorer.alpha = 0.5;\n\n    // Reduce the width of the health bar's inner rectangle by 1 pixel\n    healthBar.outer.width -= 5;\n  } else {\n    // Make the explorer fully opaque (non-transparent) if it hasn't been hit\n    explorer.alpha = 1;\n  }\n\n  // Check for a collision between the explorer and the treasure\n  if (bump.hitTestRectangle(explorer, treasure)) {\n    // If the treasure is touching the explorer, center it over the explorer\n    treasure.x = explorer.x + 8;\n    treasure.y = explorer.y + 8;\n  }\n\n  // Does the explorer have enough health? If the width of the `innerBar`\n  // is less than zero, end the game and display \"You lost!\"\n  if (healthBar.outer.width <= 0) {\n    state = end;\n    message.text = \"You lost!\";\n  }\n\n  // If the explorer has brought the treasure to the exit,\n  // end the game and display \"You won!\"\n  if (bump.hitTestRectangle(treasure, door)) {\n    state = end;\n    message.text = \"You won!\";\n  }\n}\n\nfunction end() {\n  gameScene.visible = false;\n  gameOverScene.visible = true;\n}\n\nfunction initHealthBar() {\n  // Create the health bar\n  var healthBar = new Container();\n\n  // Create the black background rectangle\n  var innerBar = new Graphics();\n  innerBar.beginFill(0);\n  innerBar.drawRect(0, 0, 128, 8);\n  innerBar.endFill();\n  healthBar.addChild(innerBar);\n\n  // Create the front red rectangle\n  var outerBar = new Graphics();\n  outerBar.beginFill(16724736);\n  outerBar.drawRect(0, 0, 128, 8);\n  outerBar.endFill();\n  healthBar.addChild(outerBar);\n\n  healthBar.outer = outerBar;\n\n  return healthBar;\n}\n\nfunction bindKeyBorad() {\n  // Capture the keyboard arrow keys\n  var left = keyboard(37);\n  var right = keyboard(39);\n  var up = keyboard(38);\n  var down = keyboard(40);\n\n  // Left arrow key 'press' method\n  left.press = function () {\n    // Change the explorer's velocity when the key is pressed\n    explorer.vx = -explorerSpeed;\n    explorer.vy = 0;\n  };\n\n  // Left arrow key 'elease' method\n  left.release = function () {\n    // If the left arrow has been released, and the right arrow isn't down,\n    // and the explorer isn't moving vertically, stop the sprite from moving\n    // by setting its velocity to zero\n    if (!right.isDown && explorer.vy === 0) {\n      explorer.vx = 0;\n    }\n  };\n\n  //Right\n  right.press = function () {\n    explorer.vx = explorerSpeed;\n    explorer.vy = 0;\n  };\n\n  right.release = function () {\n    if (!left.isDown && explorer.vy === 0) {\n      explorer.vx = 0;\n    }\n  };\n\n  // Up\n  up.press = function () {\n    explorer.vy = -explorerSpeed;\n    explorer.vx = 0;\n  };\n\n  up.release = function () {\n    if (!down.isDown && explorer.vx === 0) {\n      explorer.vy = 0;\n    }\n  };\n\n  // Down\n  down.press = function () {\n    explorer.vy = explorerSpeed;\n    explorer.vx = 0;\n  };\n\n  down.release = function () {\n    if (!up.isDown && explorer.vx === 0) {\n      explorer.vy = 0;\n    }\n  };\n}\n\n// The game's helper functions:\n\nfunction randomInt(min, max) {\n  return Math.floor(Math.random() * (max - min + 1)) + min;\n}\n\nfunction linkFont(source) {\n  // console.log(\"linkFont\", source)\n  // Use the font's filename as the 'fontFamily' name.\n  // This code captures the font file's name without the extension or file path\n  var fontFamily = source.split(\"/\").pop().split(\".\")[0];\n\n  // Append an '@font-face' style rule to the head of the HTML document\n  var newStyle = document.createElement(\"style\");\n  var fontFace = \"@font-face {\\n    font-family: \\\"\" + fontFamily + \"\\\";\\n    src: url(\\\"\" + source + \"\\\");\\n  }\";\n  newStyle.appendChild(document.createTextNode(fontFace));\n  document.head.appendChild(newStyle);\n}\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///5\n");

/***/ })

/******/ });